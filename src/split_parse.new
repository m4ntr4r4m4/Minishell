/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   split_parse.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ahammoud <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/16 18:01:49 by ahammoud          #+#    #+#             */
/*   Updated: 2023/03/04 12:19:52 by ahammoud         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "minishell.h"

int	ft_tr(const char *s, char quote, int *i)
{
	if (quote == ' ')
		return (case_vol(s, i));
	else
		return (case_two(s, i, quote));
}

int	count_quotes(char *str)
{
	int	i;
	int	count;

	i = 0;
	count = 0;
	while (str[i])
	{
		if (str[i] == '"')
		{
			while (str[i] && str[i] != '"')
			{
				count++;
				i++;
			}
		}
		else if (str[i] == 39)
		{
			while (str[i] && str[i] != 39)
			{
				count++;
				i++;
			}
			if (i == strlen(str) - 1 && str[i] == 39)
			{
				count++;
				break;
			}
		}
		else
			count++;
		i++;
	}
	return (count);
}

char	*fill_str(char *str, char *new)
{
	int		x;
	int		i;

	x = 0;
	i = 0;
	while (i < ft_strlen(str))
	{	
		if (str[i] == 39)
		{
		//	i++;
			//while (str[i] && str[i]i != 39)
			
			while (i < ft_strlen(str))
			{
				fprintf(stderr, "%d %d\n", i , ft_strlen(str));
				new[x++] = str[i++];
			}
		}
		else if (str[i] == '"')
		{
			i++;
			while (str[i] && str[i] != '"')
				new[x++] = str[i++];
		}
		else
			new[x++] = str[i];
		i++;
	}
	free(str);
	return (new);
}

char	*delete_quotes(char *str)
{
	int		count;
	char	*new;

	count = count_quotes(str);
	new = malloc(count + 1);
	if (!new)
		return (NULL);
	new[count] = '\0';
	new = fill_str(str, new);
	return (new);
}

char	**ft_split_parse(char *s, char c)
{
	char	**mots;
	int		wc;

	if (!s)
		return (NULL);
	wc = word(s, c);
	mots = malloc(sizeof(char *) * (wc + 1));
	if (!mots)
		return (0);
	mots = cpy(mots, s, wc, c);
	return (mots);
}
